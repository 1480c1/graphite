#!/usr/bin/python

from subprocess import call
from optparse import OptionParser
from random import uniform
import sys, os, resource

def excluded(loc, *ranges) :
    for r in ranges :
        if loc >= r[0] and loc <= r[1] : return True
    return False

parser = OptionParser(usage="usage: %prog -f font [options] -- command")
parser.add_option("-l", "--logfile", help="Log results to this file")
parser.add_option("-f", "--font", help="Required font file to corrupt")
parser.add_option("-s", "--single", action="store_true", help="Only one iteration")
parser.add_option("-p", "--position", help="Specifies position to corrupt (hex)")
parser.add_option("-v", "--value", help="Specifies value to use (dec)")
parser.add_option("-V", "--verbose", action="store_true", help="Be noisy")
parser.add_option("-t", "--timeout", type="int", help="limit subprocess time in seconds")
parser.add_option("--memory", type="int", help="limit subprocess address space in MB")
parser.add_option("-c","--count",type='int',help='Flag every count iterations')

(opts, args) = parser.parse_args()

fontlen = os.path.getsize(opts.font)
if opts.logfile :
    log = open(opts.logfile, "a")
else :
    log = sys.stdout

def rlimit() :
    if opts.timeout :
        resource.setrlimit(resource.RLIMIT_CPU, (opts.timeout, opts.timeout))
    if opts.memory :
        mem = opts.memory * 1024 * 1024
        resource.setrlimit(resource.RLIMIT_AS, (mem, mem))

font = None
count = 0
while (1) :
    if font == None :
        font = open(opts.font, "r+b")
    loc = int(opts.position, 16) if opts.position else int(uniform(0, fontlen))
    val = int(opts.value) if opts.value else int(uniform(0, 256))
    font.seek(loc, 0)
    oldval = font.read(1)
    font.seek(loc, 0)
    font.write(chr(val))
    font.close()

    if opts.verbose :
        print "0x%X,%d" % (loc, val)
    count += 1
    if opts.count and count % opts.count == 0 :
        print count / opts.count,
        sys.stdout.flush()
    subfile = open("templog.txt", "w")
#    retval = call(["xetex", "-interaction=batchmode", "-no-pdf", "test.tex"], stdout = subfile, stderr = subfile)
#    retval = call(["comparerenderer/comparerenderer", "-f", opts.font, "-t", "../../tests/texts/my_HeadwordSyllables.txt", "-s", "12", "-n"], stdout=subfile, stderr=subfile, preexec_fn=rlimit)
    retval = call(args, stdout=subfile, stderr=subfile, preexec_fn=rlimit)
    if retval < 0 :
        print >>log, "%d,0x%x,%d" % (retval, loc, val)
    elif opts.verbose :
        print >>log, ",0x%x,%d" % (loc, val)
    log.flush()
    subfile.close()
    font = open(opts.font, "r+b")
    font.seek(loc, 0)
    font.write(oldval)
    if opts.single :
        break

if font != None :
    font.close()

